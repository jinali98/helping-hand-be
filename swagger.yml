openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /auth/volunteer:
    post:
      tags:
        - auth
      summary: Register a new volunteer user
      description: Register a new volunteer user
      operationId: registerVolunteer
      requestBody:
        description: Register a new volunteer user in the portal
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Volunteer"
        required: true
      responses:
        "200":
          description: Successful operation sends OTP code to the provided email id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: invalid request body
  /auth/organization:
    post:
      tags:
        - auth
      summary: Register a new organization
      description: Register a new organization
      operationId: registerOrganization
      requestBody:
        description: Register a new organization in the portal
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
        required: true
      responses:
        "200":
          description: Successful operation sends OTP code to the provided email id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: invalid request body
  /auth/login:
    post:
      tags:
        - auth
      summary: User Login to the portal
      description: User Login to the portal
      operationId: login
      requestBody:
        description: User Login to the portal
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
        "400":
          description: Incorrect username or password
  /auth/confirmRegistration:
    post:
      tags:
        - auth
      summary: User verify the email id by providing the OTP
      description: User verify the email id by providing the OTP
      operationId: confirmRegistration
      requestBody:
        description: User provide OTP and email for the verification
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTP"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: cannot confirm user account
  /auth/resendConfirmationCode:
    post:
      tags:
        - auth
      summary: User request to re send the OTP
      description: User request to re send the OTP
      operationId: resendOTP
      requestBody:
        description: User provide email to resend the OTP
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTPResend"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: invalid request body

  /opportunities:
    get:
      tags:
        - opportunities
      summary: view list of opportunities
      description: view list of opportunities
      operationId: getOpportunities
      parameters:
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: string
            format: "10"
        - name: status
          in: query
          description: filter out records by status
          required: false
          schema:
            type: string
            format: pending
            enum:
              - open
              - closed
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          description: no records found
    post:
      tags:
        - opportunities
      summary: Organization create a new opportunity
      description: Organization create a new opportunity
      operationId: createOpportunity
      requestBody:
        description: Organization create a new opportunity
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Opportunity"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: invalid request body

  /opportunities/{oppId}:
    get:
      tags:
        - opportunities
      summary: View an opportunity by id
      description: view an opportunity details by id
      operationId: viewOpportunity
      parameters:
        - name: oppId
          in: path
          description: ID of opportunity that need to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          description: no record found
    post:
      tags:
        - opportunities
      summary: Organization update an opportunity status by id
      description: Organization update an opportunity status by id
      operationId: updateOpportunityStatus
      parameters:
        - name: oppId
          in: path
          description: ID of opportunity that need to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Organization update status
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: invalid request body

  /opportunities/{oppId}/volunteers:
    get:
      tags:
        - volunteers
      summary: Get Volunteers by opportunity id
      description: Get list of Volunteers by opportunity id
      operationId: getVolunteersByOpportunity
      parameters:
        - name: oppId
          in: path
          description: ID of opportunity
          required: true
          schema:
            type: string
            format: abc458
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: string
            format: "10"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          description: no record found

  /opportunities/{oppId}/contributions:
    get:
      tags:
        - contributions
      summary: Get contributions by opportunity id
      description: view list of contributions for an opportunity by id
      operationId: getContributionsByOpportunity
      parameters:
        - name: oppId
          in: path
          description: ID of opportunity
          required: true
          schema:
            type: string
            format: abc458
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: string
            format: "10"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          description: no record found

  /opportunities/{oppId}/applications:
    get:
      tags:
        - applications
      summary: Get applications by opportunity id
      description: view list of apllications for an opportunity by id
      operationId: getApplicationsByOpportunity
      parameters:
        - name: oppId
          in: path
          description: ID of opportunity
          required: true
          schema:
            type: string
            format: abc458
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: string
            format: "10"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          description: no record found
    post:
      tags:
        - applications
      summary: apply for an opportunity
      description: volunteer apply for an opportunity
      operationId: createApplication
      parameters:
        - name: oppId
          in: path
          description: ID of opportunity
          required: true
          schema:
            type: string
            format: abc458
      requestBody:
        description: volunteer apply for an opprtunity
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Application"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: invalid request body

  /volunteers/{volId}:
    get:
      tags:
        - volunteers
      summary: Get volunteer profile data
      description: Get volunteer profile details if the profile is public. if the profile details requested by the user it will send all the details
      operationId: getVolunteerProfile
      parameters:
        - name: volId
          in: path
          description: volunteer id
          required: true
          explode: true
          schema:
            type: string
            format: abc123

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Volunteer"
        "404":
          description: no profile found

  /volunteers/{volId}/contributions:
    get:
      tags:
        - contributions
      summary: Get contributions by volunteer id
      description: Get list of contributions by volunteer id
      operationId: getContributionsByVolunteer
      parameters:
        - name: volId
          in: path
          description: volunteer id
          required: true
          explode: true
          schema:
            type: string
            format: abc123
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: string
            format: "10"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Volunteer"
        "404":
          description: no profile found

  /volunteers:
    get:
      tags:
        - volunteers
      summary: Get volunteers list
      description: Get a list of volunteers
      operationId: getVolunteerList
      parameters:
        - name: score
          in: query
          description: volunteer score
          required: false
          schema:
            type: string
            format: "100"
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: string
            format: "10"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Volunteer"
        "404":
          description: no records found
    patch:
      tags:
        - volunteers
      summary: update volunteer profile
      description: User update the volunteer profile details
      operationId: updateVolunteerProfile
      requestBody:
        description: volunteer update the profile details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolunteerProfile"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Volunteer"
        "400":
          description: invalid request

  /applications:
    get:
      tags:
        - applications
      summary: Get list of applications
      description: volunteer user get all the applications they have applied
      operationId: getApplicationsList
      parameters:
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: string
            format: "10"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        "404":
          description: no records found
  /applications/{appId}:
    get:
      tags:
        - applications
      summary: view application by id
      description: view an application
      operationId: viewApplication
      parameters:
        - name: appId
          in: path
          description: application id
          required: true
          schema:
            type: string
            format: abc123
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        "404":
          description: no records found
    patch:
      tags:
        - applications
      summary: update application by id
      description: organization update the application status
      operationId: updateApplication
      parameters:
        - name: appId
          in: path
          description: application id
          required: true
          schema:
            type: string
            format: abc123
      requestBody:
        description: update application status
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationStatus"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        "400":
          description: invalid request body

  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/xml:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "405":
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    VolunteerProfile:
      type: object
      properties:
        name:
          type: string
          example: jane doe
        profilePic:
          type: string
          example: profile pic URL
        gender:
          type: string
          example: male
          enum:
            - male
            - female
            - other
        address:
          type: string
          example: 27/3, 5th lane, Colombo 05
        country:
          type: string
          example: Sri Lanka
        bio:
          type: string
          example: volunteer profile bio
        isPublic:
          type: boolean
    Volunteer:
      required:
        - name
        - email
        - password
        - address
        - country
      type: object
      properties:
        name:
          type: string
          example: jane doe
        email:
          type: string
          example: janedoe@gmail.com
        password:
          type: string
          example: qwdrth289P*
        address:
          type: string
          example: 27/3, 5th lane, Colombo 05
        country:
          type: string
          example: Sri Lanka
    Organization:
      required:
        - organizationName
        - email
        - password
        - address
        - country
        - phone
      type: object
      properties:
        organizationName:
          type: string
          example: jane doe
        email:
          type: string
          example: janedoe@gmail.com
        password:
          type: string
          example: qwdrth289P*
        address:
          type: string
          example: 27/3, 5th lane, Colombo 05
        country:
          type: string
          example: Sri Lanka
        phone:
          type: string
          example: 00947614589657
    Login:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: janedoe@gmail.com
        password:
          type: string
          example: qwdrth289P*
    OTP:
      required:
        - email
        - code
      type: object
      properties:
        code:
          type: string
          example: 12345
        email:
          type: string
          example: janedoe@gmail.com
    OTPResend:
      required:
        - email
      type: object
      properties:
        email:
          type: string
          example: janedoe@gmail.com
    Status:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          example: closed
          enum:
            - closed
            - published
    ApplicationStatus:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          example: approved
          enum:
            - approved
            - rejected
        reason:
          type: string
          example: reason if the application is rejected
    Application:
      required:
        - resumeUrl
        - purposeLetterUrl
      type: object
      properties:
        resumeUrl:
          type: string
          example: s3 bucket pre signed URL
        purposeLetterUrl:
          type: string
          example: s3 bucket pre signed URL
    Opportunity:
      required:
        - title
        - description
        - venue
        - startingDate
        - startingTime
        - durationInDays
        - hoursPerDay
        - volunteerCapacity
        - deadline
        - category
        - contactPersonName
        - contactPersonEmail
        - contactPersonDesignation
      type: object
      properties:
        title:
          type: string
          example: We Plant Campaign
        description:
          type: string
          example: We Plant Campaign is a program to grow and look after plants
        venue:
          type: string
          example: Colombo
        startingDate:
          type: string
          example: 12-08-2024
        durationInDays:
          type: number
          example: 5
        hoursPerDay:
          type: number
          example: 5
        volunteerCapacity:
          type: number
          example: 205
        deadline:
          type: string
          example: 07-07-2024
        category:
          type: string
          example: environment
        contactPersonName:
          type: string
          example: Jane Doe
        contactPersonEmail:
          type: string
          example: jane@gmail.com
        contactPersonDesignation:
          type: string
          example: Manager
        certificateProvided:
          type: boolean
          example: true
        otherDetails:
          type: string
          example: Any other details organization would like to share goes here
        status:
          type: string
          example: published
          enum:
            - closed
            - published
            - draft

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
        message:
          type: string
        data:
          type: object
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Volunteer"
        application/xml:
          schema:
            $ref: "#/components/schemas/Volunteer"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
